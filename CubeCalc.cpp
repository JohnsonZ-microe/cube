// CubeCalc.cpp: implementation of the CCubeCalc class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "Cube02.h"
#include "CubeCalc.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//各个位置所含方块朝向总数 角3 棱2
//前12个为棱, 后8个为角
const int val[ 20 ] = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3 };

// RLFBUD 是用于输入的面顺序，因此输入中第一个块首先是面向人的
// 程序使用后，移动为 FBRLUD 顺序，即“前后右左上下
const char *CCubeCalc::faces = "RLFBUD";
//这个顺序中 RL FB UD是三组对立面，是不能组成棱或角的，
//这样，棱就是在3组中选2组，共3种组合，每种组合的每个面又有两种选择，
//因此, 棱的组合有 3*2*2 = 12 种
//而角就是3组中选3组，只有一种组合，加上每个面有两种选择，
//因此，角的组合有 2*2*2 =  8 种

//采用略微不同于输入顺序的内部顺序，目的是保证第四步的连续性、
//输入: UF UR UB UL DF DR DB DL FR FL BR BL UFR URB UBL ULF DRF DFL DLB DBR
//对应：A  B  C  D  E  F  G  H  I  J  K  L  M   N   O   P   Q   R   S   T
//内部: UF DF UB DB UR DR UL DL FR FL BR BL UFR UBL DFL DBR DLB DRF URB ULF
//对应：A  E  C  G  B  F  D  H  I  J  K  L  M   S   N   T   R   O   Q    P
                                                
const char *CCubeCalc::order = "AECGBFDHIJKLMSNTROQP";

//   R   L   F   B   U   D
//   0   1   2   3   4   5
//   1   2   4   8   16  32

// A:UF =16+4  =20:T    E:DF =32+4  =36:d    C:UB =16+8  =24:X    G:DB =32+8  =40:h
// B:UR =16+1  =17:Q    F:DR =32+1  =33:a    D:UL =16+2  =18:R    H:DL =32+2  =34:b
// I:FR = 4+1  = 5:E    J:FL = 4+2  = 6:F    K:BR = 8+1  = 9:I    L:BL = 8+2  =10:J
// M:UFR=16+4+1=21:U    S:UBL=16+8+2=26:Z    N:DFL=32+4+2=38:f    T:DBR=32+8+1=41:i
// R:DLB=32+2+8=42:j    O:DRF=32+1+4=37:e    Q:URB=16+1+8=25:Y    P:ULF=16+2+4=22:V

//bithash: 20, 36, 24, 40, 17, 33, 18, 34, 5, 6, 9, 10, 21, 26, 38, 41, 42, 37, 25, 22
const char *CCubeCalc::bithash = "TdXhQaRbEFIJUZfijeYV";

//bithash到输入
const char CCubeCalc::bithashtoinput[][4] = {
	//5:E   6:F               9:I    10:J
    "FR",  "FL",  "", "",    "BR",  "BL",  "", "",    "",    "",    "", "",
	//17:Q  18:R       20:T   21:U   22:V       24:X   25:Y   26:Z
    "UR",  "UL",  "", "UF",  "UFR", "ULF", "", "UB",  "URB", "UBL", "", "", "", "", "", "",
    //33:a  34:b       36:d   37:e   38:f       40:h   41:i   42:j
	"DR",  "DL",  "", "DF",  "DRF", "DFL", "", "DB",  "DBR", "DLB"
};

//Each move consists of two 4-cycles. This string contains these in FBRLUD order.
//以八个为一组分别代表FBRLUD面, 以此来为旋转面上各位置的方向、所含块提供准确变化方式
const char *CCubeCalc::perm = "AIBJTMROCLDKSNQPEKFIMSPRGJHLNTOQAGCEMTNSBFDHORPQ";

//
const char *CCubeCalc::moveFace = "FBRLUD";

// table0[ 1 ]
const unsigned long CCubeCalc::table0[] = {
    // table0 -- 0(00..99)
    0X00000001,
};

// table1[ 512 ]
const unsigned long CCubeCalc::table1[] = {
	// table1 -- 0(00..99)
    0X05605001, 0X70050650, 0X50040440, 0X06506004, 0X60040440, 0X05605004, 0X05605005, 0X70050650, 0X50040440, 0X06506004,
    0X05604005, 0X70040650, 0X05604005, 0X70040650, 0X60050550, 0X06606005, 0X60040440, 0X05605004, 0X05604005, 0X70040650,
    0X05604005, 0X70040650, 0X60050550, 0X06606005, 0X05605005, 0X70050650, 0X60050550, 0X06606005, 0X60050550, 0X06606005,
    0X07707007, 0X50070770, 0X50040550, 0X06605004, 0X04504004, 0X60050550, 0X05504004, 0X60050540, 0X60050550, 0X06606005,
    0X04503004, 0X60040540, 0X60050450, 0X06606005, 0X60050540, 0X06606005, 0X07706005, 0X60070770, 0X04503004, 0X60040540,
    0X60050450, 0X06606005, 0X60050540, 0X06606005, 0X07706005, 0X60070770, 0X50050440, 0X05505005, 0X06606005, 0X50060660,
    0X06606005, 0X50060660, 0X60070770, 0X06606007, 0X50040550, 0X06605004, 0X04503004, 0X60040540, 0X04503004, 0X60040540,
    0X50050440, 0X05505005, 0X04504004, 0X60050550, 0X60050450, 0X06606005, 0X60050450, 0X06606005, 0X06606005, 0X50060660,
    0X05504004, 0X60050540, 0X60050540, 0X06606005, 0X60050540, 0X06606005, 0X06606005, 0X50060660, 0X60050550, 0X06606005,
    0X07706005, 0X60070770, 0X07706005, 0X60070770, 0X60070770, 0X06606007, 0X03402005, 0X60040430, 0X50050340, 0X05505004,
    // table1 -- 1(00..99)
    0X50040430, 0X05505005, 0X06606004, 0X60060660, 0X50050340, 0X05505004, 0X06606005, 0X50060660, 0X06606004, 0X50070660,
    0X60070660, 0X06706006, 0X50040430, 0X05505005, 0X06606004, 0X50070660, 0X06606005, 0X50060660, 0X60060660, 0X07606007,
    0X06606004, 0X60060660, 0X60070660, 0X06706006, 0X60060660, 0X07606007, 0X07607007, 0X80070670, 0X60050440, 0X05506005,
    0X05505004, 0X60040540, 0X04505004, 0X60040550, 0X60050550, 0X06606005, 0X04504004, 0X60030540, 0X60050550, 0X06606004,
    0X60040550, 0X06606005, 0X07707005, 0X60060770, 0X04504004, 0X60030540, 0X60050550, 0X06606004, 0X60040550, 0X06606005,
    0X07707005, 0X60060770, 0X50040550, 0X05505004, 0X06606005, 0X50060660, 0X06606005, 0X50060660, 0X60070770, 0X06606007,
    0X05504006, 0X60040550, 0X60050550, 0X05605005, 0X50050550, 0X06506005, 0X07706006, 0X60060770, 0X50050550, 0X05505005,
    0X06706006, 0X60060660, 0X06606006, 0X50060760, 0X70070670, 0X06706006, 0X50050550, 0X05505005, 0X06706006, 0X50060660,
    0X06606006, 0X60060760, 0X60060760, 0X07607007, 0X07606006, 0X40060670, 0X60070670, 0X05605006, 0X50060760, 0X06506007,
    0X06706007, 0X70060760, 0X04503005, 0X60030540, 0X60050440, 0X05505004, 0X50040440, 0X05506005, 0X06606005, 0X50060660,
    // table1 -- 2(00..99)
    0X50040450, 0X05605004, 0X06706005, 0X60060760, 0X07606005, 0X60060670, 0X60070670, 0X06706006, 0X50040540, 0X06505004,
    0X07606005, 0X60060670, 0X06706005, 0X60060760, 0X60060760, 0X07606007, 0X06606005, 0X50060660, 0X70070670, 0X06606006,
    0X60060760, 0X06607007, 0X07607007, 0X70070670, 0X50060550, 0X04405006, 0X06605005, 0X50050550, 0X05505005, 0X50050660,
    0X60060660, 0X06606006, 0X05505006, 0X40050550, 0X60060560, 0X05605005, 0X50060660, 0X06606006, 0X06706006, 0X70070670,
    0X05505006, 0X40050550, 0X60060660, 0X06605006, 0X50050650, 0X06506006, 0X07606006, 0X70070760, 0X50060660, 0X05505006,
    0X06606006, 0X70060560, 0X06506006, 0X70060660, 0X80060660, 0X07708006, 0X60050440, 0X05506005, 0X04504004, 0X60030540,
    0X04504004, 0X60030540, 0X50040550, 0X05505004, 0X05505004, 0X60040540, 0X60050550, 0X06606004, 0X60050550, 0X06606004,
    0X06606005, 0X50060660, 0X04505004, 0X60040550, 0X60040550, 0X06606005, 0X60040550, 0X06606005, 0X06606005, 0X50060660,
    0X60050550, 0X06606005, 0X07707005, 0X60060770, 0X07707005, 0X60060770, 0X60070770, 0X06606007, 0X04503005, 0X60030540,
    0X50040450, 0X05605004, 0X50040540, 0X06505004, 0X06606005, 0X50060660, 0X60050440, 0X05505004, 0X06706005, 0X60060760,
    // table1 -- 3(00..99)
    0X07606005, 0X60060670, 0X70070670, 0X06606006, 0X50040440, 0X05506005, 0X07606005, 0X60060670, 0X06706005, 0X60060760,
    0X60060760, 0X06607007, 0X06606005, 0X50060660, 0X60070670, 0X06706006, 0X60060760, 0X07606007, 0X07607007, 0X70070670,
    0X05504006, 0X60040550, 0X50050550, 0X05505005, 0X50050550, 0X05505005, 0X07606006, 0X40060670, 0X60050550, 0X05605005,
    0X06706006, 0X60060660, 0X06706006, 0X50060660, 0X60070670, 0X05605006, 0X50050550, 0X06506005, 0X06606006, 0X50060760,
    0X06606006, 0X60060760, 0X50060760, 0X06506007, 0X07706006, 0X60060770, 0X70070670, 0X06706006, 0X60060760, 0X07607007,
    0X06706007, 0X70060760, 0X50060550, 0X04405006, 0X05505006, 0X40050550, 0X05505006, 0X40050550, 0X50060660, 0X05505006,
    0X06605005, 0X50050550, 0X60060560, 0X05605005, 0X60060660, 0X06605006, 0X06606006, 0X70060560, 0X05505005, 0X50050660,
    0X50060660, 0X06606006, 0X50050650, 0X06506006, 0X06506006, 0X70060660, 0X60060660, 0X06606006, 0X06706006, 0X70070670,
    0X07606006, 0X70070760, 0X80060660, 0X07708006, 0X03404005, 0X60020430, 0X50040450, 0X05505003, 0X50030540, 0X05505004,
    0X06606004, 0X60060660, 0X50040450, 0X05505003, 0X06606005, 0X50060660, 0X06607004, 0X50060660, 0X70060670, 0X06606006,
    // table1 -- 4(00..99)
    0X50030540, 0X05505004, 0X06607004, 0X50060660, 0X06606005, 0X50060660, 0X60060760, 0X06607006, 0X06606004, 0X60060660,
    0X70060670, 0X06606006, 0X60060760, 0X06607006, 0X07607007, 0X80070670, 0X40050660, 0X05504005, 0X05605005, 0X50050560,
    0X06505005, 0X50050650, 0X60060660, 0X06606006, 0X05505006, 0X40050550, 0X60060560, 0X05605005, 0X60060660, 0X06506006,
    0X07707006, 0X70060660, 0X05505006, 0X40050550, 0X60060660, 0X05606006, 0X50050650, 0X06506006, 0X06607006, 0X70060770,
    0X50060660, 0X05505006, 0X06606006, 0X70060560, 0X06506006, 0X70060660, 0X70060660, 0X08807006, 0X40050660, 0X05504005,
    0X05505006, 0X40050550, 0X05505006, 0X40050550, 0X50060660, 0X05505006, 0X05605005, 0X50050560, 0X60060560, 0X05605005,
    0X60060660, 0X05606006, 0X06606006, 0X70060560, 0X06505005, 0X50050650, 0X60060660, 0X06506006, 0X50050650, 0X06506006,
    0X06506006, 0X70060660, 0X60060660, 0X06606006, 0X07707006, 0X70060660, 0X06607006, 0X70060770, 0X70060660, 0X08807006,
    0X06606007, 0X30060660, 0X50060660, 0X04504006, 0X40060660, 0X05405006, 0X06605007, 0X70050660, 0X50060660, 0X04504006,
    0X05606007, 0X70060450, 0X06505007, 0X70050560, 0X70060560, 0X07707005, 0X40060660, 0X05405006, 0X06505007, 0X70050560,
    // table1 -- 5(00..99)
    0X05406007, 0X70060650, 0X70050650, 0X07707006, 0X06605007, 0X70050660, 0X70060560, 0X07707005, 0X70050650, 0X07707006,
    0X07708005, 0X80080770, 0X80080770,
};

// table2[ 821 ]
const unsigned long CCubeCalc::table2[] = {
    // table2 -- 0(00..99)
    0X60600001, 0X70506000, 0X00706000, 0X50700500, 0X50500060, 0X00640000, 0X70050500, 0X65000060, 0X05050000, 0X05040500,
    0X70607000, 0X00606000, 0X00007600, 0X50500706, 0X00670000, 0X00060500, 0X70060606, 0X06060000, 0X05050500, 0X00050500,
    0X00706070, 0X00007400, 0X05000606, 0X00600507, 0X00060600, 0X00050605, 0X70000606, 0X04060500, 0X00050500, 0X60000660,
    0X60700060, 0X50500070, 0X00770000, 0X60060600, 0X66000060, 0X05060000, 0X05050500, 0X07000070, 0X06060006, 0X05050006,
    0X40407000, 0X00650000, 0X00060600, 0X60060706, 0X06060000, 0X08060800, 0X00070600, 0X07060070, 0X06070006, 0X00057000,
    0X00607070, 0X00060600, 0X00040605, 0X60000504, 0X05070600, 0X00060600, 0X70000770, 0X06050070, 0X00077000, 0X60007070,
    0X70006070, 0X64000060, 0X06060000, 0X05060400, 0X06000070, 0X06050006, 0X05050005, 0X05006000, 0X06000507, 0X06700006,
    0X60606000, 0X06060000, 0X06070500, 0X00050600, 0X06040070, 0X06060005, 0X00077000, 0X05007070, 0X07600004, 0X00707000,
    0X00607060, 0X06030600, 0X00050400, 0X50000670, 0X04050060, 0X00047000, 0X50006060, 0X06006070, 0X00506000, 0X00507060,
    0X00007070, 0X70607006, 0X00506000, 0X00007500, 0X50600506, 0X00650000, 0X00050600, 0X70060506, 0X05060000, 0X06060700,
    // table2 -- 1(00..99)
    0X00070600, 0X00405070, 0X00005600, 0X06000706, 0X00400607, 0X00070700, 0X00070607, 0X70000706, 0X04070600, 0X00070700,
    0X70000660, 0X00006060, 0X06000406, 0X07000306, 0X00700006, 0X00060605, 0X70000606, 0X60800005, 0X00060600, 0X60000570,
    0X70600070, 0X50500060, 0X00560000, 0X00070700, 0X50040706, 0X06070000, 0X07060700, 0X00070600, 0X07060060, 0X07070006,
    0X00067000, 0X00506070, 0X00060700, 0X00060606, 0X60000707, 0X06060600, 0X00070600, 0X70000670, 0X07070060, 0X00067000,
    0X70006070, 0X00006060, 0X00060607, 0X60000606, 0X70700005, 0X00060600, 0X60000670, 0X70700050, 0X00060070, 0X70006080,
    0X70007070, 0X76000070, 0X05050000, 0X06060500, 0X00070600, 0X06060070, 0X07060003, 0X00047000, 0X07006060, 0X06700006,
    0X00608000, 0X00606060, 0X06050600, 0X00060700, 0X80000670, 0X07060070, 0X00055000, 0X70005060, 0X05007060, 0X00706000,
    0X00706070, 0X00007060, 0X00060706, 0X60000570, 0X70700060, 0X00050070, 0X60005060, 0X60007050, 0X06000060, 0X00707070,
    0X00007070, 0X07000087, 0X00607006, 0X00006600, 0X05000506, 0X00700505, 0X00050600, 0X00060607, 0X60000606, 0X04050500,
    0X00060600, 0X70000460, 0X00006060, 0X07000505, 0X06000606, 0X00600005, 0X00060606, 0X70000606, 0X60800006, 0X00060300,
    // table2 -- 2(00..99)
    0X60000460, 0X70700070, 0X06000070, 0X03000504, 0X06500005, 0X00607000, 0X50000405, 0X60700004, 0X60707000, 0X60000500,
    0X60600070, 0X50500070, 0X00760000, 0X00040600, 0X00070706, 0X60000603, 0X06060700, 0X00060600, 0X60000560, 0X05060060,
    0X00056000, 0X70006080, 0X00007070, 0X00070706, 0X70000605, 0X60700005, 0X00050600, 0X70000770, 0X60600060, 0X00050070,
    0X70005070, 0X70007060, 0X05000070, 0X60000606, 0X70600005, 0X70607000, 0X70000600, 0X60700050, 0X70600060, 0X70070000,
    0X60007060, 0X77000060, 0X05060000, 0X05050600, 0X00050500, 0X60000560, 0X05020060, 0X00056000, 0X60006060, 0X06006060,
    0X00606000, 0X00606060, 0X00006060, 0X00060605, 0X70000660, 0X60600060, 0X00050070, 0X60007050, 0X70007060, 0X06000060,
    0X00705060, 0X00007060, 0X06000067, 0X70000505, 0X60600060, 0X60600070, 0X60060000, 0X70006070, 0X64000060, 0X05060000,
    0X00006060, 0X05000066, 0X06060004, 0X60700007, 0X60500070, 0X00750000, 0X50060500, 0X65000060, 0X06050000, 0X07060600,
    0X05000070, 0X05060006, 0X06070006, 0X50507000, 0X00560000, 0X00070600, 0X50060706, 0X07070000, 0X07060700, 0X00070700,
    0X07040070, 0X06070006, 0X00066000, 0X00707060, 0X00050500, 0X00060603, 0X70000706, 0X05060600, 0X00060700, 0X60000670,
    // table2 -- 3(00..99)
    0X06070080, 0X00047000, 0X60006060, 0X40006060, 0X46000050, 0X07070000, 0X06070400, 0X07000050, 0X06070006, 0X07070007,
    0X06006000, 0X07000607, 0X06700006, 0X50706000, 0X07060000, 0X06060600, 0X00070700, 0X06060070, 0X06070006, 0X00067000,
    0X07007060, 0X06600007, 0X00706000, 0X00706060, 0X06050600, 0X00060700, 0X70000550, 0X07060060, 0X00057000, 0X70006050,
    0X06007060, 0X00807000, 0X00706070, 0X00006070, 0X04000066, 0X06060006, 0X06060005, 0X03007000, 0X06000606, 0X05700006,
    0X00607000, 0X70000706, 0X80600005, 0X60706000, 0X06060000, 0X06060007, 0X00067000, 0X06008060, 0X06600006, 0X00605000,
    0X00707070, 0X70700005, 0X70707000, 0X00707000, 0X07060600, 0X00057000, 0X70006050, 0X05007070, 0X00606000, 0X00605070,
    0X00007070, 0X70707007, 0X00606000, 0X00008600, 0X60600706, 0X00450000, 0X00070600, 0X40060806, 0X06070000, 0X07060700,
    0X00060600, 0X08060070, 0X06060006, 0X00057000, 0X00507070, 0X00060600, 0X00070607, 0X70000606, 0X07070700, 0X00060600,
    0X70000760, 0X06060070, 0X00066000, 0X60006060, 0X00007070, 0X00050705, 0X70000605, 0X70600006, 0X00050600, 0X60000770,
    0X70700060, 0X00070070, 0X60007070, 0X70005060, 0X55000070, 0X06060000, 0X07070700, 0X00060600, 0X06070060, 0X06060007,
    // table2 -- 4(00..99)
    0X00066000, 0X06006060, 0X07700006, 0X00707000, 0X00607070, 0X07060700, 0X00050600, 0X60000750, 0X06050060, 0X00065000,
    0X60007070, 0X07006070, 0X00606000, 0X00607060, 0X00005050, 0X00060605, 0X50000670, 0X60600050, 0X00070060, 0X70006060,
    0X70006070, 0X06000070, 0X00707070, 0X00006070, 0X07000077, 0X07050006, 0X06050005, 0X00077000, 0X06007070, 0X07700005,
    0X00606000, 0X00606050, 0X60700006, 0X70707000, 0X00707000, 0X06060500, 0X00077000, 0X70006060, 0X06007070, 0X00505000,
    0X00707060, 0X00007060, 0X60606007, 0X00707000, 0X00007600, 0X00040706, 0X70007070, 0X70007060, 0X06000060, 0X00706070,
    0X00004040, 0X07000074, 0X00706006, 0X00007600, 0X07000706, 0X00600707, 0X00070700, 0X00050604, 0X60000605, 0X06060500,
    0X00070600, 0X70000670, 0X05040070, 0X00066000, 0X60007070, 0X00007070, 0X00060605, 0X70000606, 0X70700007, 0X00060600,
    0X70000670, 0X60700070, 0X00060080, 0X70007070, 0X60006050, 0X06000070, 0X70000605, 0X60600006, 0X70707000, 0X70000600,
    0X60600060, 0X70600060, 0X70060000, 0X70007060, 0X65000050, 0X07070000, 0X06050500, 0X00060700, 0X70000670, 0X07060070,
    0X00056000, 0X70006060, 0X06007050, 0X00707000, 0X00806060, 0X00007050, 0X00070606, 0X70000670, 0X70600070, 0X00060070,
    // table2 -- 5(00..99)
    0X60006070, 0X50007070, 0X07000060, 0X00706060, 0X00006050, 0X06000076, 0X70000507, 0X40700070, 0X60700060, 0X60060000,
    0X40008060, 0X77000060, 0X06060000, 0X00008060, 0X06000077, 0X07060005, 0X06050007, 0X00066000, 0X70006070, 0X06007070,
    0X00706000, 0X00606050, 0X00006070, 0X60606005, 0X00705000, 0X00006600, 0X00050607, 0X60007070, 0X60008050, 0X07000080,
    0X00605060, 0X00005050, 0X06000076, 0X00606006, 0X00007600, 0X06000605, 0X50000706, 0X60006070, 0X66000060, 0X07060000,
    0X00007060, 0X07000066, 0X07050007, 0X00005006, 0X05000607, 0X06000607, 0X60700007, 0X76000070, 0X06050000, 0X05050400,
    0X05000060, 0X06060006, 0X06060007, 0X05006000, 0X06000505, 0X04600006, 0X70706000, 0X06040000, 0X07060600, 0X00060500,
    0X07070060, 0X06060006, 0X00056000, 0X06008060, 0X05600003, 0X00606000, 0X00707070, 0X06050500, 0X00020500, 0X60000660,
    0X05050060, 0X00056000, 0X60006060, 0X05006060, 0X00606000, 0X00606060, 0X00006060, 0X05000065, 0X06060005, 0X03060006,
    0X06006000, 0X06000706, 0X04700006, 0X00607000, 0X60000605, 0X80600006, 0X70707000, 0X07070000, 0X06050006, 0X00057000,
    0X06007050, 0X07700005, 0X00706000, 0X00706070, 0X70600005, 0X60607000, 0X00707000, 0X06060500, 0X00056000, 0X70005070,
    // table2 -- 6(00..99)
    0X06006050, 0X00706000, 0X00606070, 0X00006070, 0X60607007, 0X00706000, 0X00006600, 0X05000605, 0X04000604, 0X05500005,
    0X00607000, 0X50000305, 0X70600004, 0X60607000, 0X60000600, 0X70600070, 0X50500070, 0X06060000, 0X06600006, 0X00705000,
    0X00706070, 0X60700005, 0X70606000, 0X00606000, 0X60700700, 0X60700070, 0X00770000, 0X05060500, 0X00706000, 0X00607060,
    0X00006060, 0X60607006, 0X00706000, 0X00006400, 0X60600504, 0X00660000, 0X00060500, 0X60060607, 0X07070000, 0X05060600,
    0X00040500, 0X06050060, 0X06070004, 0X00067000, 0X06007070, 0X06600005, 0X00707000, 0X00607070, 0X05050600, 0X00060700,
    0X70000660, 0X07060070, 0X00057000, 0X80006060, 0X06006060, 0X00707000, 0X00705070, 0X00005070, 0X00050606, 0X70000660,
    0X60600060, 0X00060060, 0X60007060, 0X70005060, 0X06000050, 0X00707070, 0X00007060, 0X06000065, 0X06060007, 0X06060005,
    0X00067000, 0X06007070, 0X06700006, 0X00707000, 0X00705060, 0X70700007, 0X70608000, 0X00607000, 0X06070600, 0X00067000,
    0X70007060, 0X06006060, 0X00707000, 0X00607070, 0X00005060, 0X60707006, 0X00506000, 0X00007700, 0X00050607, 0X60007070,
    0X60006050, 0X06000060, 0X00605080, 0X00005050, 0X06000076, 0X00608005, 0X00007700, 0X07000606, 0X06000606, 0X06700005,
    // table2 -- 7(00..99)
    0X00706000, 0X00706070, 0X60600006, 0X60606000, 0X00705000, 0X70700500, 0X60700070, 0X00660000, 0X05070700, 0X00707000,
    0X00606080, 0X00006080, 0X70406007, 0X00406000, 0X00007700, 0X70600605, 0X00760000, 0X00060600, 0X00060707, 0X00507060,
    0X00006070, 0X06000056, 0X00606007, 0X00006600, 0X06000707, 0X00600507, 0X00060700, 0X00050706, 0X70000607, 0X06040600,
    0X00050400, 0X50000670, 0X04050060, 0X00037000, 0X50007070, 0X06006060, 0X00506000, 0X00506060, 0X00007070, 0X00050506,
    0X60000780, 0X60700070, 0X00060070, 0X70007060, 0X60007050, 0X07000060, 0X00707070, 0X00005060, 0X06000076, 0X60000507,
    0X70600060, 0X60600060, 0X60060000, 0X60006060, 0X76000070, 0X05060000, 0X00006070, 0X05000067, 0X04060004, 0X05050006,
    0X00068000, 0X70006070, 0X07007070, 0X00607000, 0X00705070, 0X00006050, 0X70607006, 0X00606000, 0X00007700, 0X00040607,
    0X70007070, 0X70006040, 0X07000070, 0X00704060, 0X00006060, 0X07000077, 0X00707006, 0X00007700, 0X06000706, 0X60000604,
    0X60005060, 0X56000060, 0X05050000, 0X00007060, 0X07000077, 0X07060007, 0X00006007, 0X07000606, 0X06000607, 0X05700006,
    0X00606000, 0X00606060, 0X00007060, 0X60706007, 0X00607000, 0X00006600, 0X60600504, 0X00760000, 0X00060500, 0X00060406,
    // table2 -- 8(00..99)
    0X00606050, 0X00006070, 0X06000067, 0X00606006, 0X00007600, 0X06000707, 0X00500707, 0X00050500, 0X00060707, 0X70000606,
    0X00006060, 0X06000066, 0X05060006, 0X00006006, 0X05000606, 0X06000503, 0X00700006, 0X00060506, 0X70000606, 0X70700006,
    0X00000000,
};

// table3[ 512 ]
const unsigned long CCubeCalc::table3[] = {
    // table3 -- 0(00..99)
    0X00000000, 0X50000000, 0X60000000, 0X05605000, 0X50000000, 0X06506000, 0X05605000, 0X00050650, 0X60000000, 0X05605000,
    0X05606000, 0X00060450, 0X06506000, 0X00060560, 0X00050450, 0X00000004, 0X50000000, 0X06506000, 0X06506000, 0X00060560,
    0X05406000, 0X00060650, 0X00040540, 0X00000005, 0X05605000, 0X00050650, 0X00050450, 0X00000004, 0X00040540, 0X00000005,
    0X00000003, 0X00000000, 0X60000000, 0X06606000, 0X06606000, 0X00060560, 0X06506000, 0X00060660, 0X00050550, 0X00000005,
    0X06606000, 0X00060560, 0X00060550, 0X00000005, 0X00050550, 0X00000006, 0X00000004, 0X00000000, 0X06506000, 0X00060660,
    0X00060550, 0X00000005, 0X00050550, 0X00000006, 0X00000004, 0X00000000, 0X00050550, 0X00000005, 0X00000005, 0X00000000,
    0X00000005, 0X00000000, 0X00000000, 0X00000000, 0X60000000, 0X06606000, 0X06606000, 0X00060560, 0X06506000, 0X00060660,
    0X00050550, 0X00000005, 0X06606000, 0X00060560, 0X00060550, 0X00000005, 0X00060550, 0X00000005, 0X00000005, 0X00000000,
    0X06506000, 0X00060660, 0X00050550, 0X00000006, 0X00050550, 0X00000006, 0X00000005, 0X00000000, 0X00050550, 0X00000005,
    0X00000004, 0X00000000, 0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X06606000, 0X00060660, 0X00050550, 0X00000005,
    // table3 -- 1(00..99)
    0X00050550, 0X00000005, 0X00000004, 0X00000000, 0X00050550, 0X00000005, 0X00000005, 0X00000000, 0X00000005, 0X00000000,
    0X00000000, 0X00000000, 0X00050550, 0X00000005, 0X00000005, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000,
    0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X60000000, 0X06606000,
    0X06606000, 0X00060560, 0X06506000, 0X00060660, 0X00050550, 0X00000005, 0X06606000, 0X00060560, 0X00050560, 0X00000005,
    0X00050650, 0X00000005, 0X00000004, 0X00000000, 0X06506000, 0X00060660, 0X00050560, 0X00000005, 0X00050650, 0X00000005,
    0X00000004, 0X00000000, 0X00050550, 0X00000005, 0X00000005, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000,
    0X04504000, 0X00040540, 0X00050450, 0X00000004, 0X00040540, 0X00000005, 0X00000004, 0X00000000, 0X00040340, 0X00000003,
    0X00000004, 0X00000000, 0X00000003, 0X00000000, 0X00000000, 0X00000000, 0X00030430, 0X00000004, 0X00000003, 0X00000000,
    0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X00000002, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X05505000, 0X00050550, 0X00040450, 0X00000004, 0X00040540, 0X00000004, 0X00000003, 0X00000000,
    // table3 -- 2(00..99)
    0X00050440, 0X00000004, 0X00000005, 0X00000000, 0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X00040440, 0X00000005,
    0X00000004, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000, 0X00000003, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00040440, 0X00000004, 0X00000004, 0X00000000, 0X00000004, 0X00000000,
    0X00000000, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000005, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X60000000, 0X06606000, 0X06606000, 0X00060560,
    0X06506000, 0X00060660, 0X00050550, 0X00000005, 0X06606000, 0X00060560, 0X00050560, 0X00000005, 0X00050560, 0X00000005,
    0X00000005, 0X00000000, 0X06506000, 0X00060660, 0X00050650, 0X00000005, 0X00050650, 0X00000005, 0X00000005, 0X00000000,
    0X00050550, 0X00000005, 0X00000004, 0X00000000, 0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X05505000, 0X00050550,
    0X00050440, 0X00000004, 0X00040440, 0X00000005, 0X00000003, 0X00000000, 0X00040450, 0X00000004, 0X00000005, 0X00000000,
    // table3 -- 3(00..99)
    0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X00040540, 0X00000004, 0X00000004, 0X00000000, 0X00000005, 0X00000000,
    0X00000000, 0X00000000, 0X00000003, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X04504000, 0X00040540, 0X00040340, 0X00000003, 0X00030430, 0X00000004, 0X00000002, 0X00000000, 0X00050450, 0X00000004,
    0X00000004, 0X00000000, 0X00000003, 0X00000000, 0X00000000, 0X00000000, 0X00040540, 0X00000005, 0X00000003, 0X00000000,
    0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00040440, 0X00000004, 0X00000005, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000,
    0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000004, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X06606000, 0X00060660, 0X00050550, 0X00000005, 0X00050550, 0X00000005,
    0X00000004, 0X00000000, 0X00050550, 0X00000005, 0X00000005, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000,
    // table3 -- 4(00..99)
    0X00050550, 0X00000005, 0X00000005, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000, 0X00000004, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00040440, 0X00000004, 0X00000004, 0X00000000,
    0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00040440, 0X00000004,
    0X00000005, 0X00000000, 0X00000005, 0X00000000, 0X00000000, 0X00000000, 0X00000004, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000004, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000001, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    // table3 -- 5(00..99)
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000,
};

// table4[ 32 ]
const unsigned long CCubeCalc::table4[] = {
    // table4 -- 0(00..99)
    0X00000000, 0X30000000, 0X40000000, 0X05405000, 0X50000000, 0X04504000, 0X05405000, 0X00050450, 0X40000000, 0X05405000,
    0X03404000, 0X00040230, 0X04305000, 0X00050340, 0X00040540, 0X00000005, 0X50000000, 0X04504000, 0X04305000, 0X00050340,
    0X03204000, 0X00040430, 0X00050450, 0X00000004, 0X05405000, 0X00050450, 0X00040540, 0X00000005, 0X00050450, 0X00000004,
    0X00000001, 0X00000000, 0X00000000,
};

// table5[ 192 ]
const unsigned long CCubeCalc::table5[] = {
    // table5 -- 0(00..99)
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0XBAABA300, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X87789A00, 0X00000000, 0X00000000,
    0X7887A900, 0XA6000000, 0X9669AC6A, 0X000000B9, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X7887A900,
    0X00000000, 0X00000000, 0X87789A00, 0X69000000, 0X6AA6B996, 0X000000AC, 0X00000000, 0X00000000, 0X9CCA2900, 0XB9000000,
    0X6A9B6AA5, 0X000000A5, 0X9B000000, 0XA6B9A65A, 0X0000005A, 0X009AA956, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0XA6CAA600, 0X00000000, 0X00000000, 0XB9966900, 0X8A000000, 0X8A798779, 0X00000078,
    0X00000000, 0X00000000, 0X6AA5B900, 0X47000000, 0XB7A89BB8, 0X0000004B, 0XA8000000, 0XC8384BB7, 0X000000AC, 0X005AA6B9,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0XA56A9B00, 0XA8000000, 0XB8474BB7, 0X0000009B, 0X38000000, 0XB7A8ACC8,
    0X0000004B, 0X00A56A9B, 0X00000000, 0X00000000, 0X8A000000, 0X8A798779, 0X00000078, 0X00AC6AA6, 0X00000000, 0X00000000,
    0X00B99669, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    // table5 -- 1(00..99)
    0X00000000, 0XB9966900, 0X00000000, 0X00000000, 0XA6CAA600, 0X79000000, 0X798A788A, 0X00000087, 0X00000000, 0X00000000,
    0XA65A9B00, 0XA8000000, 0XC8384BB7, 0X000000AC, 0X47000000, 0XB7A89BB8, 0X0000004B, 0X00A65A9B, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X5AA6B900, 0X38000000, 0XB7A8ACC8, 0X0000004B, 0XA8000000, 0XB8474BB7, 0X0000009B, 0X006AA5B9,
    0X00000000, 0X00000000, 0X79000000, 0X798A788A, 0X00000087, 0X00B99669, 0X00000000, 0X00000000, 0X00AC6AA6, 0X00000000,
    0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X9AA95600, 0XB9000000, 0X6A9B5AA6, 0X000000A5,
    0X9B000000, 0XA5B9A65A, 0X0000006A, 0X009CCA29, 0X00000000, 0X00000000, 0XA6000000, 0X9669A6CA, 0X000000B9, 0X0087789A,
    0X00000000, 0X00000000, 0X007887A9, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X69000000, 0XCAA6B996,
    0X000000A6, 0X007887A9, 0X00000000, 0X00000000, 0X0087789A, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00BAABA1, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000, 0X00000000,
    0X00000000, 0X00000000, 0X00000000,
};

// table6[ 1728 ]
const unsigned long CCubeCalc::table6[] = {
    // table6 -- 0(00..99)
    0X7AA55AA1, 0X5AA55AA5, 0X7AA55AA7, 0XB4699249, 0X96699669, 0XB669966B, 0XB6499869, 0X98899889, 0XB889988B, 0X98875889,
    0X9AA99AA7, 0X9AA97AA9, 0X98857889, 0X9AA77AA9, 0X9AA99AA9, 0XBA899867, 0X98A99A89, 0XBA8998AB, 0XB4699649, 0X96699669,
    0XB629966B, 0X5AA55AA7, 0X5AA55AA5, 0X3AA55AA7, 0X98897A89, 0X9AA97AA9, 0X9A875AA9, 0X9A899AAB, 0X98899889, 0X96A998A9,
    0XB889988B, 0X98899889, 0X9889968B, 0X98A99A89, 0X78A99AA7, 0X9A857AA9, 0X98879A89, 0X7AA95AA9, 0X9A897AA9, 0XB889988B,
    0X98899869, 0X9889988B, 0XB68998A7, 0X98A99A89, 0XBA8998AB, 0X98A97889, 0X98A79AA5, 0X9AA79AA9, 0X7AA99AA7, 0X9AA99AA9,
    0X9AA99AA9, 0XB889988B, 0X98899689, 0XB8899889, 0X9A899AAB, 0X98899889, 0X9AA99869, 0X98A99A89, 0X58A77AA9, 0X9A879AA9,
    0X98A79889, 0X78A59AA7, 0X9AA99AA9, 0XB6899869, 0X94899889, 0XB889988B, 0XB889988B, 0X98699889, 0XB8899889, 0X7AA77AA9,
    0X7AA77AA7, 0X9AA77AA5, 0XB4299649, 0X96699669, 0XB669966B, 0X7A833887, 0X7AA55AA5, 0X78A75A87, 0X98A77885, 0X9CA97AA9,
    0X9A897AA9, 0X98879667, 0X9A8B9889, 0X988B9A89, 0X98897667, 0XBA8998AB, 0X98899889, 0X7A6778A7, 0X9A8998A9, 0X9AA99AA9,
    0X78855AA7, 0X5AA73AA7, 0X78853A87, 0XB669966B, 0X98699649, 0X9469944B, 0X96899887, 0XBA8978AB, 0X98699889, 0X9AA998A9,
    // table6 -- 1(00..99)
    0X98A99887, 0X7A8798A7, 0X7AA778A7, 0X9A8778A9, 0X78877A87, 0X98899889, 0X98899689, 0X96897887, 0X96899887, 0X9A8B9889,
    0X986B7A89, 0X7AA778A7, 0X7A8978A7, 0X78897A87, 0X7A699AA7, 0X9A8978A9, 0X9A897AA9, 0X98897889, 0X98899689, 0X96899887,
    0XB869988B, 0X98899889, 0XB8899889, 0X98A97A89, 0X98899AA7, 0X98A77AA9, 0X9AA998A9, 0X78879A89, 0X7A8998A7, 0X98899889,
    0X98697889, 0X98899867, 0X98879889, 0X98699889, 0X98899867, 0X98A77A89, 0X7A8778A7, 0X9AA77AA5, 0X98A79A89, 0X78A778A9,
    0X9AA99A89, 0X98A9988B, 0X96899889, 0XB889988B, 0XB6899469, 0X98899889, 0XB889988B, 0X98877A85, 0X98A79AA7, 0X9AC99AA9,
    0X98655669, 0X98877887, 0X96897869, 0X78657865, 0X78879A87, 0X78A97887, 0X78675865, 0X98A77887, 0X78A79887, 0X98677489,
    0X98899869, 0X98899689, 0X98A77A89, 0X7AA77A87, 0X5AA778A9, 0X98899A8B, 0X98899889, 0XB869988B, 0X78895887, 0X78A77889,
    0X56A77687, 0X98699889, 0X96699689, 0X98677689, 0X96897869, 0X98899867, 0X96677889, 0X78879887, 0X78897A85, 0X56A77687,
    0X78859887, 0X78897A67, 0X58A77867, 0X96879869, 0X78877889, 0X98699669, 0X98899489, 0X96879867, 0X98899689, 0X76877885,
    0X96A57887, 0X78A79887, 0XB889968B, 0X98899889, 0X9889988B, 0X7A877AA7, 0X98A77A87, 0X78A79887, 0X98699889, 0X76697669,
    // table6 -- 2(00..99)
    0X98699889, 0X78897887, 0X78A57869, 0X58A77867, 0X76877885, 0X76879A85, 0X78A97887, 0X96877689, 0X76859885, 0X96879869,
    0X7A877AA7, 0X78A79A87, 0X78A97887, 0XB889988B, 0X98699689, 0XB6899869, 0X98857889, 0X9AA77AA9, 0X9AA99AA9, 0X98697867,
    0XB8A99889, 0X98A9B889, 0X78875665, 0X9A8778A9, 0X78877887, 0X98477487, 0X98699669, 0X78899687, 0X78697647, 0XB8899689,
    0X98879689, 0X5A837885, 0X7A8778A7, 0X7A8778A7, 0X98899889, 0X98897889, 0X78899669, 0X9AA97AA9, 0X7AA97A87, 0X98877A89,
    0X96697869, 0XB8699889, 0X76679667, 0X7A8778A7, 0X7A8778A5, 0X588758A5, 0X58877867, 0X9A8776A9, 0X78857887, 0X78679689,
    0X96899489, 0X78679487, 0X78899687, 0X78879869, 0X78699689, 0X78A77687, 0X98875889, 0X58877A67, 0X7AA578A7, 0X78877887,
    0X7A877A87, 0X96699669, 0X98877689, 0X7689B667, 0X98A59A89, 0X9AA778A9, 0X9AA798A9, 0X78899869, 0XB8A99889, 0X98A7B689,
    0X78A978A7, 0X58877887, 0X7A877AA7, 0X78699887, 0X98677889, 0X9869B649, 0X78699887, 0X76697689, 0X98899887, 0X78A77887,
    0X98857689, 0X78877A65, 0X98699889, 0X98879889, 0X98899867, 0X9AA97AA9, 0X78879AA7, 0X98A77A89, 0X98875889, 0X9AA99AA7,
    0X9AA97AA9, 0X98679867, 0X9889BA89, 0X98AB9889, 0X78857665, 0X7A897887, 0X78897A87, 0X78679647, 0X78699869, 0X988B9889,
    // table6 -- 3(00..99)
    0X98477487, 0X98699669, 0X78899687, 0X5A873885, 0X7A877887, 0X7A877AA7, 0X98899889, 0X98899869, 0X76897889, 0X9AA79AA9,
    0X7AA77AA9, 0X98877889, 0X78899687, 0X98899867, 0X78679689, 0X78A798A7, 0X788778A7, 0X7A8578A7, 0X78A77687, 0X788978A7,
    0X56895887, 0X78699887, 0X9889B667, 0X94697889, 0X96679869, 0X78899669, 0X766B9867, 0X58877867, 0X5A697887, 0X78897A87,
    0X7AA758A7, 0X788778A7, 0X788778A7, 0X78699887, 0X96699689, 0X98877887, 0X98A95A89, 0X7A899A87, 0X9AA97AA9, 0X98699889,
    0X98899887, 0X96899887, 0X7A8778A7, 0X7A855887, 0X5A877A85, 0X78697689, 0X76499849, 0X78699887, 0X96699669, 0X9869B867,
    0X76897867, 0X78A77887, 0X786978A5, 0X76897885, 0X78899869, 0X7889BA69, 0X98AB9889, 0X9AA79AA9, 0X78A778A7, 0X98A79A89,
    0XBA899867, 0X988998A9, 0XBA899AAB, 0X7A8776A7, 0X9AA99A89, 0X9AA998A9, 0X98477689, 0X98699689, 0X98899889, 0X5A873885,
    0X78877A87, 0X7AA778A7, 0X5A837885, 0X78A77887, 0X7AA778A7, 0X98699629, 0X96699669, 0XB869968B, 0X7AA99AA7, 0X78A99A89,
    0X9A6798A9, 0XB8A998AB, 0X9A899889, 0X7889988B, 0X7A8778A7, 0X78A77887, 0X78A758A7, 0X96699689, 0X96699669, 0X94699689,
    0X98879689, 0X98899689, 0X98679489, 0X5A877A85, 0X78A77887, 0X7A8378A7, 0X7A8778A7, 0X78875A87, 0X7AA77887, 0X98897689,
    // table6 -- 4(00..99)
    0X78699849, 0X98699889, 0XB689986B, 0X98899889, 0X98899889, 0X7A877AA7, 0X78877A85, 0X788778A7, 0X7AA9986B, 0X9A899889,
    0XBA8998AB, 0X7A879AA7, 0X98A996A9, 0X9AA798A9, 0X96699689, 0X96699669, 0X98699649, 0X5A877A85, 0X38877A87, 0X7A8778A7,
    0X7A877AA7, 0X78A57887, 0X7A877887, 0X98899889, 0X74699689, 0X98679889, 0X7A897AA7, 0X78699A89, 0X9AA99AA9, 0XB88998AB,
    0X988998A9, 0XB8899A87, 0XB4699649, 0X92699669, 0XB669966B, 0X78A558A7, 0X58A37AA3, 0X78A57A87, 0X98A77A89, 0X7A8778A7,
    0X9AA77AA5, 0X98899889, 0X98699887, 0X96899887, 0X98899889, 0X98879689, 0X98899867, 0X7AA99AA7, 0X768998A9, 0X9A879AA9,
    0X7AA77A87, 0X38A55AA5, 0X78835A87, 0XB689966B, 0X96699649, 0X9469944B, 0X98899889, 0X98699889, 0X96879887, 0X9A8978A9,
    0X9A899A89, 0X7A8978A7, 0X7AA798A7, 0X7A8798A7, 0X78877A87, 0X98A9B867, 0X7889B8A9, 0X98699889, 0X98899889, 0X78899689,
    0X98899867, 0X7AA978A7, 0X7A8778A7, 0X78879A87, 0X7AA998A7, 0X968798A7, 0X9AA99AA9, 0X96AB9687, 0X98879889, 0X9889BA89,
    0XB889988B, 0X96899889, 0XB8899889, 0X98879A89, 0X7A877AA9, 0X9AA99A89, 0X9A8798A9, 0X9AA97889, 0X7A8998A7, 0X98AB9867,
    0X98899889, 0X9867BA89, 0X96A9B687, 0X9889B8A7, 0X98899889, 0X98C99885, 0X7AA79AA7, 0X9A879AA9, 0X98897A89, 0X9AA998A7,
    // table6 -- 5(00..99)
    0X98A77AA9, 0X9869988B, 0X9A899889, 0XB889988B, 0X5AA55AA7, 0X5AA55AA5, 0X7AA55AA3, 0XB669966B, 0X96499469, 0XB4899649,
    0X98A9988B, 0X96899889, 0XB889988B, 0X9AA79AA9, 0X78A778A7, 0X98A79A89, 0X9AA97AA9, 0X78879AA7, 0X98A77A89, 0XB8899AAB,
    0X98899889, 0XB8A99887, 0XB669986B, 0X96499469, 0XB4699649, 0X5AA55AA7, 0X5AA55AA5, 0X5AA55AA5, 0X9AA79AA9, 0X78A778A7,
    0X98A79A89, 0X98899889, 0X98A99A89, 0X9A89988B, 0XB869988B, 0X96899889, 0XB6899869, 0X9A877AA9, 0X7A877AA9, 0X98A97A89,
    0X9AA97AA9, 0X78879AA7, 0X98A77A89, 0XB869988B, 0X96899889, 0XB6899869, 0XBA899A8B, 0X98899889, 0XB8A99887, 0X9A877AA9,
    0X7A877AA9, 0X98A97A89, 0X9AA77AA7, 0X7AA77AA7, 0X9AA77AA5, 0XB8899889, 0X98699A89, 0XB889988B, 0X98899889, 0X98A99A89,
    0X988998AB, 0X9A877AA9, 0X9AA978A7, 0X98A77A89, 0X9A877AA9, 0X9AA978A7, 0X98A77A89, 0X9869988B, 0X9A899889, 0XB889988B,
    0XB8899889, 0X98A99689, 0XB889988B, 0X7AA99AA7, 0X9AA99AA9, 0X9AA99AAB, 0X98A79889, 0X78A59AA7, 0X9AA99AA9, 0X96899887,
    0X9689BA87, 0X98AB9889, 0X78859887, 0X7A679887, 0X78877A65, 0X96879669, 0X76699889, 0X768B9667, 0X78699887, 0X76697689,
    0X98899887, 0X7A8778A7, 0X7A857887, 0X7A877A87, 0X98899889, 0X78899889, 0X78899669, 0X9AA97AA9, 0X7AA97A87, 0X98877A89,
    // table6 -- 6(00..99)
    0X78699689, 0X96479889, 0X78697487, 0X7AA758A7, 0X788778A7, 0X588578A5, 0X56A79887, 0X786798A7, 0X78875887, 0X96899869,
    0X9689B687, 0X76697667, 0X78879887, 0X76899689, 0X986B9649, 0X78879687, 0X5A879887, 0X58877A67, 0X58A778A5, 0X788378A7,
    0X7A8778A7, 0X98899487, 0X94679667, 0X78899687, 0X98A79A89, 0X7A859AA9, 0X9AA978A9, 0X98879889, 0X96899889, 0X98899867,
    0X7A877887, 0X7A895887, 0X7A877AA7, 0X78879687, 0X98897869, 0X78699689, 0X74899687, 0X9669B887, 0X98897689, 0X76A79685,
    0X788798A5, 0X78877887, 0X76899889, 0X9889BA89, 0X98AB7689, 0X9A877AA9, 0X9AA978A7, 0X98A77A89, 0X9AA998AB, 0X9A899889,
    0X9A899869, 0X9A899AA9, 0X78897889, 0X7A899AA7, 0X98899689, 0X76679869, 0X98699689, 0X7A8778A7, 0X78855A87, 0X5AA77885,
    0X78897AA7, 0X58877A87, 0X7A8778A7, 0X96699689, 0X96699669, 0X98699649, 0X9A8798A9, 0X988798A9, 0X7AA998A7, 0X98899889,
    0X988998A9, 0XB8899AA9, 0X7A857AA7, 0X58877A87, 0X5A877885, 0XB669966B, 0X96699669, 0X96699669, 0X98699889, 0X76697669,
    0X98699889, 0X7A877AA7, 0X78A55887, 0X5A877885, 0X7A877887, 0X78859A87, 0X7AA778A7, 0X98679689, 0X96679689, 0X98899689,
    0X98699669, 0X96699669, 0X98699649, 0X7A8578A7, 0X58A77887, 0X5AA77885, 0XBA8998A9, 0X988998A9, 0X9A899A69, 0X9AA998A9,
    // table6 -- 7(00..99)
    0X78879A89, 0X7A8998A7, 0X96899869, 0X98899889, 0XB88998AB, 0X788578A7, 0X98A77887, 0X7AA778A7, 0X7A877A87, 0X78A95887,
    0X7A8778A7, 0X98679689, 0X98897669, 0X98699689, 0X9A8798A9, 0X9AA97889, 0X7A8998A7, 0X98A99889, 0X9A899889, 0X988998AB,
    0XB889988B, 0X98699889, 0XB8899889, 0X7A877AA7, 0X78A79A87, 0X78A97887, 0X96879869, 0X76877689, 0X98899869, 0X58877867,
    0X58879A67, 0X78A97887, 0X78677A87, 0X98857A87, 0X78879865, 0X98697889, 0X76499869, 0X98899889, 0X7A897AA7, 0X78A77A89,
    0X78A77887, 0XB889968B, 0X98899889, 0X9669986B, 0X56897A87, 0X78857A89, 0X78877687, 0X98899689, 0X96899667, 0X98679689,
    0X96877889, 0X78659889, 0X96875669, 0X78879887, 0X76897A87, 0X76A75885, 0X78679887, 0X58897A87, 0X78A77865, 0X98895869,
    0X58677867, 0X96897869, 0X98699889, 0X96479889, 0X98897689, 0X78875A87, 0X96877A87, 0X76879885, 0X9689986B, 0X98499889,
    0XB889988B, 0X98877A89, 0X78A77AA7, 0X9AA77AA5, 0X98679689, 0X98897669, 0X98699689, 0X58895A67, 0X78877A69, 0X78877887,
    0X56877887, 0X78879A87, 0X78A95687, 0X96697869, 0X98899687, 0X96877889, 0X58A97A89, 0X7AA79C89, 0X9AA978A9, 0XB8899889,
    0X98A99689, 0XB889988B, 0X98A99A89, 0X58A77AA9, 0X9A879AA9, 0X98899889, 0X98879869, 0X78899869, 0X78897887, 0X7A6758A7,
    // table6 -- 8(00..99)
    0X78879865, 0X78697689, 0X76499849, 0X78699887, 0X78899687, 0X9687766B, 0X98899849, 0X5AA77885, 0X38877887, 0X7A877AA7,
    0X988B9A67, 0X96899A8B, 0X98879889, 0X9AA778A9, 0X9AA79AA7, 0X98A77889, 0X96899869, 0X9667786B, 0X76699867, 0X7AA778A7,
    0X78877885, 0X58875AA5, 0X78897887, 0X7A8578A7, 0X58679867, 0X98899887, 0X74699669, 0X78479687, 0X78679887, 0X96679689,
    0X98899887, 0X58A95867, 0X78677887, 0X78879A87, 0X7A8778A7, 0X5A8778A7, 0X7A877887, 0X968B7669, 0X96899669, 0X76879867,
    0X98A97A89, 0X5A877A89, 0X9AA99AA9, 0X98899889, 0X96897889, 0X98899867, 0X788578A7, 0X9A8778A7, 0X7A8778A7, 0X788B7847,
    0X96699869, 0X98679889, 0X78879687, 0X98897869, 0X78699689, 0X78A97865, 0X78877887, 0X78659A87, 0X788B7A69, 0X98899A6B,
    0X98899889, 0X9A877AA9, 0X9AA978A7, 0X98A77A89, 0X98A97889, 0X98A79AA5, 0X9AA79AA9, 0X96899887, 0XB6A79889, 0X98A9B889,
    0X78895887, 0X7A8776A7, 0X76879885, 0X78699887, 0X96699689, 0X98877887, 0X96897669, 0XB6899669, 0X76879867, 0X7A8778A7,
    0X7A8778A5, 0X788778A7, 0X98899889, 0X98899869, 0X76879889, 0X9AA79AA9, 0X7AA77AA9, 0X98877889, 0X78897887, 0XB6699869,
    0X94679889, 0X7A877887, 0X7A8778A9, 0X7A8758A7, 0X78897687, 0X7A8778A7, 0X56859887, 0X78897687, 0X98899869, 0X78697689,
    // table6 -- 9(00..99)
    0X78699689, 0X96897447, 0X78699887, 0X56A97887, 0X78875687, 0X78879A87, 0X58A778A5, 0X78877883, 0X7A877AA7, 0X74899687,
    0X96877669, 0X9889B889, 0X98A97A89, 0X9AA97885, 0X9AA79AA9, 0X76899889, 0XB8A97869, 0X98A9B889, 0X7AA578A7, 0X58877887,
    0X5A877A85, 0X96899869, 0X96677869, 0X7669B867, 0X98899487, 0X94679667, 0X78899687, 0X76A97685, 0X78857887, 0X78879A87,
    0X98897889, 0X96899889, 0X96899887, 0X9A877AA9, 0X7A877AA9, 0X98A97A89, 0XB889988B, 0X98899689, 0XB8899889, 0X7A877AA7,
    0X98A77A87, 0X78A79887, 0X96897869, 0X96699887, 0X96877889, 0X78677A87, 0X78A79885, 0X76897885, 0X58877867, 0X98A77887,
    0X78A59687, 0X98679889, 0X96899489, 0X98879689, 0X7A879AA7, 0X78A97A87, 0X78A77887, 0XB889968B, 0X98899889, 0X9669986B,
    0X78697887, 0X78A77889, 0X76A57885, 0X98697689, 0X98699869, 0X98697689, 0X98859869, 0X98877687, 0X96857669, 0X58859A67,
    0X78A97887, 0X78877687, 0X56879A87, 0X78A97865, 0X78877887, 0X96877889, 0X78895665, 0X96879869, 0X98699889, 0X96897467,
    0X98899889, 0X56877887, 0X98A75867, 0X78A79887, 0X9689986B, 0X98899489, 0XB889988B, 0X58A79A89, 0X9AC97A87, 0X9AA798A9,
    0X98899689, 0X76679869, 0X98699689, 0X78897887, 0X76A75889, 0X78A77865, 0X78857A87, 0X76A79887, 0X78897865, 0X96679869,
    // table6 -- 10(00..99)
    0X78677889, 0X98899869, 0X98877A89, 0X78A77AA7, 0X9AA77AA5, 0XB8899889, 0X98699A89, 0XB889988B, 0XB68998A7, 0X988998A9,
    0XBA899AAB, 0X7AA996A7, 0X98A79A87, 0X9AA998A9, 0X98499889, 0X98697689, 0X98697889, 0X7A875AA7, 0X78A77887, 0X788778A7,
    0X7A857AA7, 0X78877A87, 0X7A877887, 0XB689986B, 0X98899889, 0X98899889, 0X7A899AA7, 0X9AA97A89, 0X9A6978A9, 0XBAA9988B,
    0X9A899889, 0X7889988B, 0X58877AA5, 0X78877A87, 0X7A8738A7, 0X98699669, 0X96699669, 0X94699689, 0X98899689, 0X98679889,
    0X98697489, 0X7A8778A7, 0X78877A87, 0X78A578A7, 0X58877AA5, 0X78A73887, 0X7A8778A7, 0X98899689, 0X98897647, 0X98699889,
    0X92699689, 0X96699669, 0XB869968B, 0X588778A5, 0X78A77883, 0X7AA778A7, 0X76A998AB, 0X9A899889, 0XBA8998AB, 0X7A899AA7,
    0X98A97687, 0X9AA99AA9, 0X98699669, 0X96699669, 0X98699649, 0X7A8778A7, 0X58A77887, 0X7AA77887, 0X588778A5, 0X78837A87,
    0X7AA778A7, 0X98899689, 0X94679687, 0X98899889, 0X7A899AA7, 0X98679AA9, 0X9AA978A9, 0XBA89988B, 0X988998A9, 0XB8899A87,
    0X98879A89, 0X7AA95AA9, 0X9A897AA9, 0X98879889, 0X98899869, 0X78899869, 0X76877885, 0X7A897887, 0X78695A87, 0X96699669,
    0X986B9867, 0X76897867, 0X78899687, 0X78879869, 0X78699689, 0X7AA778A7, 0X788758A7, 0X7A877887, 0X9669BA87, 0X98AB9889,
    // table6 -- 11(00..99)
    0X98897889, 0X9AA778A9, 0X9AA79AA7, 0X98A77889, 0X98499887, 0X98697669, 0X78497687, 0X7A8758A7, 0X7A877887, 0X58857AA5,
    0X78A57887, 0X788978A7, 0X58697867, 0X9667B869, 0X78899669, 0X76699867, 0X74699887, 0X988B9667, 0X98697889, 0X56877887,
    0X7A897685, 0X78897A87, 0X588778A5, 0X7A873887, 0X7A877AA7, 0X78699689, 0X96897447, 0X78699887, 0X98A79A89, 0X7AA95887,
    0X9AA99AA9, 0X7689BA89, 0X98AB9867, 0X98899889, 0X7AA77887, 0X788598A7, 0X7A8778A7, 0X78679887, 0X96679689, 0X98899887,
    0X7867B687, 0X78699869, 0X98899849, 0X78A77887, 0X588976A7, 0X78897865, 0X98699889, 0X78899889, 0X98899867, 0X9AA97AA9,
    0X78879AA7, 0X98A77A89, 0X7AA99AA7, 0X9AA99AA9, 0X9AA99AA9, 0XB889968B, 0X98899889, 0X9889988B, 0XB869988B, 0X98899889,
    0XB8899889, 0X98A95A89, 0X7A899A87, 0X9AA97AA9, 0X98A59A89, 0X9AA778A9, 0X9AA798A9, 0X7A899A6B, 0X98899889, 0XBAA998AB,
    0XB889988B, 0X98899889, 0X9869988B, 0X9AA77AA7, 0X7AA77AA7, 0X5AA77AA9, 0X98A97A89, 0X9A879AA9, 0X9AA758A9, 0XBA8998A9,
    0X98A99A89, 0X968998A9, 0X9689986B, 0X98899889, 0XB889948B, 0X98A79A89, 0X9AA998A7, 0X9AA578A9, 0X98A79A89, 0X7AA95887,
    0X9AA99AA9, 0X9689986B, 0X98899849, 0XB889988B, 0X76899AAB, 0X98899889, 0XBAA998AB, 0X98A97A89, 0X9AA97885, 0X9AA79AA9,
    // table6 -- 12(00..99)
    0X3AA77AA9, 0X7AA77AA7, 0X9AA77AA9, 0X9689986B, 0X98899489, 0XB889988B, 0XBA8998A9, 0X98A99A89, 0X9A899869, 0X98A97A89,
    0X5A877A89, 0X9AA99AA9, 0X98A79A89, 0X7A859AA9, 0X9AA978A9, 0XB889988B, 0X96899889, 0XB8899889, 0X9689986B, 0X98499889,
    0XB889988B, 0X9AA77AA7, 0X7AA77AA7, 0X9AA77AA5, 0XB889988B, 0X98899869, 0X9889988B, 0X98A79A89, 0X7AA77AA9, 0X9A899889,
    0X7AA778A7, 0X7A8978A7, 0X78897A87, 0X78899869, 0X7A6B9889, 0X988B9A89, 0X98899689, 0X98897889, 0X78899869, 0X7AA978A7,
    0X7A899A69, 0X9A899AA9, 0X98A97889, 0X9AA99AA7, 0X98A778A9, 0XB8899889, 0X988998A9, 0XB889968B, 0X98897889, 0X98899889,
    0X76699889, 0X9A899AA9, 0X988998A9, 0X7A8778A7, 0X98A77889, 0X7AA77AA7, 0X5A877AA9, 0X98899889, 0X98899887, 0X76699889,
    0X76899889, 0X9A8B9687, 0X988B9A89, 0X58A97A89, 0X7A8978A7, 0X9AA99CA9, 0X7AA998A7, 0X9AA97867, 0X9A899AA9, 0X76AB9889,
    0X98897689, 0X9889BA89, 0X9689986B, 0X98899849, 0XB889988B, 0X98A77AA9, 0X7AA95885, 0X98A79A89, 0X9A8798A9, 0X988798A9,
    0X7AA998A7, 0X78AB7869, 0X98699889, 0X9889BA89, 0X98899689, 0X78899889, 0X78899869, 0X7AA978A7, 0X7A8778A7, 0X78879A87,
    0X9AA95A89, 0X5A877A87, 0X98A97A89, 0XB869988B, 0X96899889, 0XB6899869, 0X9AA998AB, 0X9A899889, 0X968998A9, 0X9A899AA9,
    // table6 -- 13(00..99)
    0X988998A9, 0X7A8778A7, 0X98899689, 0X96899667, 0X98679689, 0X78879AA7, 0X78A77887, 0X7A8578A7, 0X7A8778A7, 0X78A77885,
    0X58A758A5, 0X96699689, 0X96699669, 0X94699689, 0X9A8978A9, 0X98899887, 0X7AA99AA7, 0X98899889, 0X988998A9, 0XBA899A89,
    0X7A877887, 0X78A77885, 0X7AA798A7, 0X96899869, 0X98899889, 0XBA89988B, 0X98697689, 0X96699667, 0X98899889, 0X788758A7,
    0X78877A87, 0X7AA978A7, 0X7A875AA7, 0X78A77887, 0X588578A5, 0X98699889, 0X96699689, 0X98677689, 0X98699669, 0X96699669,
    0X94699689, 0X7A877A87, 0X78877A89, 0X7A8758A7, 0XBA8998A9, 0X988998A9, 0X96899AA9, 0X9A8978A9, 0X9A899A89, 0X7A8978A7,
    0XB669966B, 0X96699669, 0X96699669, 0X7A877AA7, 0X78877A85, 0X588758A5, 0X7A8758A7, 0X78877A87, 0X58A578A5, 0X98697689,
    0X98699869, 0X98697689, 0X9AA998A9, 0X98A99887, 0X7A8798A7, 0X98A99889, 0X9A899889, 0X9A89988B, 0X98A99A89, 0X78A99AA7,
    0X9A857AA9, 0X98899889, 0X98899887, 0X76899689, 0X78879887, 0X7A879687, 0X76875A85, 0X78899687, 0X966B9887, 0X94897689,
    0X78679689, 0X96899489, 0X78679487, 0X5AA77885, 0X788778A7, 0X7A8378A7, 0X9889BA67, 0X76AB9889, 0X98899889, 0X9AA778A9,
    0X7AA77A87, 0X98A99A89, 0X78697887, 0X96699687, 0X98899887, 0X788758A7, 0X7A877887, 0X7A897AA7, 0X58A59867, 0X788796A7,
    // table6 -- 14(00..99)
    0X78877887, 0X7887B847, 0X76899689, 0X98699689, 0X96899869, 0X968B9687, 0X76697667, 0X78879887, 0X7A879885, 0X56677A87,
    0X7A8778A7, 0X7A877887, 0X78857AA7, 0X78897687, 0X98899869, 0X78697689, 0X98A79A89, 0X9AA998A7, 0X9AA578A9, 0X7887BA69,
    0X98AB9889, 0X98899689, 0X7AA778A7, 0X788558A7, 0X5A877885, 0X98899887, 0X74699669, 0X78479687, 0X9687B669, 0X76699889,
    0X76899667, 0X78A79865, 0X588798A7, 0X78677887, 0X98899889, 0X96899889, 0X96897887, 0X9A877AA9, 0X7A877AA9, 0X98A97A89,
    0X98897A89, 0X9AA97AA9, 0X9A875AA9, 0X98897889, 0X98899889, 0X76899689, 0X76877885, 0X9A8758A9, 0X78677887, 0X78899687,
    0X98899867, 0X78679689, 0X96699669, 0X9887768B, 0X76899667, 0X7AA778A7, 0X78877887, 0X78875AA7, 0X966B9A87, 0X98897A8B,
    0X98899889, 0X9AA778A9, 0X7AA77A87, 0X98A99A89, 0X74699887, 0X9867788B, 0X98699689, 0X7AA77887, 0X78877885, 0X7A879AA7,
    0X56877887, 0X9A6578A9, 0X78877887, 0X78697887, 0X96699687, 0X98899887, 0X98499887, 0X98697669, 0X78497687, 0X78A75887,
    0X98877889, 0X56677A87, 0X588778A5, 0X7A8778A7, 0X7A8738A7, 0X786B7687, 0X98899689, 0X94879689, 0X98A97A89, 0X9A879AA9,
    0X9AA758A9, 0X98699889, 0X98899889, 0X96879887, 0X7A8578A7, 0X5A8778A7, 0X5A877885, 0X966B7869, 0X98699889, 0X76679667,
    // table6 -- 15(00..99)
    0X78699689, 0X96479889, 0X78697487, 0X78A77887, 0X98677889, 0X76857A85, 0X768B9A89, 0X98879A8B, 0X98899689, 0X9AA79AA9,
    0X78A778A7, 0X98A79A89, 0XB6899869, 0X98899889, 0XB849988B, 0X98A77A89, 0X7AA77A87, 0X5AA778A9, 0X96677889, 0X78895889,
    0X96675869, 0X78877A87, 0X78A79867, 0X56895887, 0X78877A87, 0X98875A87, 0X58879667, 0X98899889, 0X76899869, 0X98479689,
    0X98899C85, 0X78A97AA9, 0X9AA77AA9, 0X9889968B, 0X98899889, 0XB8A9988B, 0X76697A85, 0X78875A89, 0X78877887, 0X98697689,
    0X96699667, 0X98899889, 0X96879669, 0X78877869, 0X98899869, 0X78879A65, 0X56A97887, 0X78877887, 0X76679A85, 0X78A97887,
    0X78875887, 0X96897669, 0X98899887, 0X96877689, 0X98699889, 0X98897869, 0X98497689, 0X78877A87, 0X98877A67, 0X56859887,
    0XB889988B, 0X98899889, 0X9869988B, 0X7A879AA7, 0X78A97A87, 0X78A77887, 0X98679689, 0X96679689, 0X98899689, 0X78897A65,
    0X76877A89, 0X78857887, 0X78877A87, 0X58A79887, 0X58897667, 0X98899869, 0X56877887, 0X96657869, 0X7A897AA7, 0X78A77A89,
    0X78A77887, 0XB889988B, 0X98699689, 0XB6899869, 0XB889988B, 0X98899889, 0X9889968B, 0X98A97A89, 0X9AA99A87, 0X98877AA9,
    0X7AA778A7, 0X9A8778A9, 0X78877A87, 0X98899689, 0X98899889, 0X76897889, 0X78899869, 0XBA8996AB, 0X98879889, 0X7AA798A7,
    // table6 -- 16(00..99)
    0X9AA998A9, 0X9A8796A9, 0X98A79889, 0X7AA77A89, 0X9AA99A89, 0XB8899889, 0X98899869, 0XB8899A8B, 0X76899889, 0XBA6798AB,
    0X98899889, 0X9A8978A9, 0X98899887, 0X7AA99AA7, 0X58A79A89, 0X9A8798C9, 0X9AA77AA9, 0X78A7B869, 0X9889B6A9, 0X98899889,
    0X98879889, 0X98899889, 0X78699869, 0X98A77889, 0X7AA77AA7, 0X5A877AA9, 0X7AA998A7, 0X9A879AA9, 0X9A8976A9, 0X98899689,
    0X98899889, 0X76879889, 0X9689986B, 0X98899889, 0XB889948B, 0X9AA59A89, 0X9AA778A7, 0X98A57889, 0X9A899AA9, 0X78897889,
    0X7A899AA7, 0X98899889, 0X98879889, 0X78699869, 0X76A9B889, 0X9869B8A9, 0X98897889, 0X7AA798A7, 0X7A8798A7, 0X78877A87,
    0X98A77AA9, 0X7A859AA9, 0X98A75889, 0XB869988B, 0X96899889, 0XB6899869, 0X7AA77AA9, 0X7AA77AA7, 0X5AA77AA9, 0X98899A8B,
    0X98899889, 0XB869988B, 0XB889988B, 0X98899869, 0X9689966B, 0X9AA79AA9, 0X7AA77AA9, 0X98877889, 0X9AA97AA9, 0X7AA97A87,
    0X98877A89, 0XB88998AB, 0X98A99A89, 0X7889988B, 0X9889968B, 0X98899889, 0XB8A9988B, 0X7AA99AA7, 0X9AA99AA9, 0XBAA99AA9,
    0X9AA778A9, 0X7AA77A87, 0X98A99A89, 0X98899A89, 0X98899889, 0XBAA99889, 0XB8899889, 0X98899869, 0XB8899A8B, 0X9AA778A9,
    0X7AA77A87, 0X98A99A89, 0X9AA778A9, 0X9AA79AA7, 0X98A77889, 0XB8899889, 0X988998A9, 0XB889968B, 0XBA89988B, 0X98A99A89,
    // table6 -- 17(00..99)
    0X7889988B, 0X9AA79AA9, 0X7AA77AA9, 0X98877889, 0X9AA77AA7, 0X7AA77AA7, 0X5AA77AA9, 0XB889968B, 0X98899889, 0X9669986B,
    0X98899A89, 0X98899889, 0XB8A998A9, 0X9AA778A9, 0X9AA79AA7, 0X98A77889, 0X9AA97AA9, 0X7AA97A87, 0X98877A89, 0XB889988B,
    0X98899869, 0X9689966B, 0XB889968B, 0X98899889, 0X9669986B, 0X7AA77AA7, 0X7AA77AA7, 0X7AA77AA7, 0X7AA77AA7,
};

// table7[ 72 ]
const unsigned long CCubeCalc::table7[] = {
    // table7 -- 0(00..99)
    0X32455421, 0X54655665, 0X56455665, 0X76655465, 0X32435443, 0X76435465, 0X56655645, 0X56677667, 0X76657667, 0X56655645,
    0X54655465, 0X54435465, 0X56655645, 0X34455645, 0X56455645, 0X76455665, 0X34453445, 0X56233467, 0X76233465, 0X56453445,
    0X76453465, 0X56655667, 0X56455465, 0X54655643, 0X56435445, 0X56655465, 0X56655445, 0X56657667, 0X76675465, 0X76657665,
    0X76657667, 0X56655667, 0X56677645, 0X54455665, 0X56653445, 0X56455645, 0X56453445, 0X56455645, 0X54655665, 0X76675667,
    0X76677665, 0X54655665, 0X76433265, 0X54435443, 0X56655467, 0X54655465, 0X54655443, 0X54655665, 0X56655667, 0X56655645,
    0X34655445, 0X56675667, 0X56675645, 0X56677667, 0X56675667, 0X56457667, 0X76675665, 0X54455665, 0X56455665, 0X54453465,
    0X54655465, 0X54435665, 0X56655445, 0X54677665, 0X76655665, 0X76675667, 0X56657667, 0X76657667, 0X56655467, 0X56877867,
    0X78677667, 0X78877687, 0X78877687,
};


const unsigned long *CCubeCalc::tables[8] = { table0, table1, table2, table3, table4, table5, table6, table7 };

///////////////////////////////
//交换数组中两个变量的值
#define SWAP( ppp, aaa, bbb )	{ temp = ppp[aaa]; ppp[aaa] = ppp[bbb]; ppp[bbb] = temp; }

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CCubeCalc::CCubeCalc()
{
	memset( v_pos, 0, 20*sizeof(int) );
	memset( v_ori, 0, 20*sizeof(int) );
	memset( v_err, 0, 20*sizeof(int) );

	phase = 0;
	temp  = 0;

	memset( moveface,   0, 20*sizeof(int) );
	memset( moveamount, 0, 20*sizeof(int) );

	resLen = 0;
	memset( resVal, 0, 256*8 );

	for( int i=0; i<4; i++ )
		m_strplan[i].Empty();
}

CCubeCalc::~CCubeCalc()
{

}

// Cycles 4 pieces in array p, the piece indices given by a[0..3].
// 旋转*p中的4个块, 4个块位置由a【0，1，2，3】决定
void CCubeCalc::cycle( int *p, char *a )
{	
	SWAP( p, a[0] - CHAROFFSET, a[1] - CHAROFFSET );
	SWAP( p, a[0] - CHAROFFSET, a[2] - CHAROFFSET );
	SWAP( p, a[0] - CHAROFFSET, a[3] - CHAROFFSET );
}

// twists i-th piece a+1 times.
void CCubeCalc::twist( int i, int a )
{
	int j = i - CHAROFFSET;
	v_ori[j] = (v_ori[j]+a+1) % val[j];
}

////////////////////////////////////////////
//转动
//m从0到5 分别代表fbrlud面的旋转 顺时针
//do a clockwise quarter turn cube move
//输入：m表示面，FBRLUD序，0F 1B 2R 3L 4U 5D
void CCubeCalc::domove( int m )
{    
    int i = 8;
	char *p = (char *)perm + 8*m;
    
    //旋转“棱”
    cycle( v_pos, p );  //旋转一面上四个棱块, 当前块得到前一块的方块值
    cycle( v_ori, p );  //旋转一面上四个棱块, 当前块得到前一方块的朝向

    //旋转“角”
    cycle( v_pos, p+4 );  //旋转一面上四个角块, 当前块得到前一块的方块值
    cycle( v_ori, p+4 );  //旋转一面上四个角块, 当前块得到前一方块的朝向

    //twist corners if RLFB
    //旋转角块朝向如果是RLFB面转动
    if( m<4 )
    {
		//  twist(p[7],1)
		//  twist(p[6],0)
		//  twist(p[5],1)
		//  twist(p[4],0)
		//for(;--i>3;) 
		for( i=7; i>=4; i-- )
		{
			//document.write( "<br> i = " + i );
			twist( p[i], i&1 );
		}

		//注意到*perm中前四组即（32个代表fbrl旋转的字符）每组的后四个角块都是按由该面左上角逆时针的顺序
		//对P【5】和p【7】 该块方向值=(该块方向值（即前一块刚才的方向值）+2）%3
		//  对5 7   1 代表正向(就朝向要旋转的面） 0代表上下 2代表左右（要旋转面的左右面）
		//  现在	之后
		//  0	2 原来前一块的上下面变为现在面的左右面
		//  1	0 原来前一块的左右面变为现在面的上下面
		//  2	1 原来前一块的正面仍是正面
		//  对4 6        该块方向值=(该块方向值（即前一块刚才的方向值）+1）%3
		//  现在	之后
		//  0	1
		//  1	2
		//  2	0 一样的分析
		//  有 0代表朝上下只有1，2在5，7和4，6间不同这是因为对当前面的4，6为魔方整体向左向右旋转90度面的5，7位
		//   同样的方向值有不同的意义, 即 对每一面旋转近考虑当前面 旋转后对从另一面看仍然符合旋转后的结果
    }

    //flip edges if FB
    //旋转棱块朝向如果是FB面转动
    if( m<2 )
    {
		//  twist(p[3],0)
		//  twist(p[2],0)
		//  twist(p[1],0)
		//  twist(p[0],0)
		//for(i=4;i--;) 
		for( i=3; i>=0; i-- )
		{
			//document.write( "<br> i = " + i );
			twist( perm[8*m+i], 0 );
		}
		//这个好理解写由0到1，或由1变0
    }
}

//////////////////////////////////////////////////////////////////
// convert permutation of 4 chars to a number in range 0..23
int CCubeCalc::permtonum( int *p, int ofp )
{
	int n = 0;
	
	for( int a=0; a<4; a++ )
    {
		n *= (4-a);

		for( int b=a+1; b<4; b++ )
		{
			//document.write( "<br> a = " + a + ", b = " + b );
			if( p[ofp+b]  < p[ofp+a] )
				n++;
		}
    }

    return n;

    // 举个例子 3 2 4 1 （2*3+1）*2+1=15
    // 用字符（a*3+b)*2+c=6*a+2b+c 符合排列知识
    // 也可联系进制 或从前往后、从后往前 每个数都会一直乘到（后面数个数）的阶乘
}

//////////////////////////////
// 得到当前魔方状态在当前阶段表格中的序列
// get index of cube position from table t
int CCubeCalc::getposition( int t )
{
    int i=-1, n=0;

    switch( t )
    {
    // case 0 does nothing so returns 0
    //当t=0 返回0

    // 对棱块i朝向如果朝向不对，就加上1右移i格 0则相当于没效果 即用12个二进制位来表示棱块朝向
    case 1: //edgeflip
		// 12 bits, set bit if edge is flipped      
		//for(;++i<12;)
		for( i=0; i<12; i++ )
		{
			//document.write( "<br> i = " + i );
			n += ( v_ori[i] << i );
		}
		break;

    // 对角块朝向，可认为是8个三进制位
    case 2://cornertwist
		// get base 3 number of 8 digits - each digit is corner twist
		//for(i=20;--i>11;)
		for( i=19; i>=12; i-- )
		{
			//document.write( "<br> i = " + i );
			n = n*3 + v_ori[i];
		}
		break;

    case 3://middle edge choice
		// 12 bits, set bit if edge belongs in Um middle slice
		// 对0～11块当v_pos【i】为8，9，10，11时移动i位 即 用12个二进制位来表示中层棱块位置
		//for(;++i<12;)
		for( i=0; i<12; i++ )
		{
			//document.write( "<br> i = " + i );
			n += (v_pos[i] & 8) ? ( 1<<i ) : 0;
		}
		break;

    case 4://ud slice choice
		// 8 bits, set bit if UD edge belongs in Fm middle slice
		// 层下层切片情况，以上已把中层安好，现在只管uf，df，ub，db与ru，lu，rd，ld各形成两个圈。
		// 这里对ru，rd，lu，ld的块进行标记。
		for( i=0; i<8; i++ )
			n += (v_pos[i] & 4) ? ( 1<<i ) : 0;
		break;

    //四分体情况 仅由各面的180度旋转，每个角块能处的位置形成一个环
    // case4、5完成后魔方的状态仅有各面180度形成，所以各情况间能通过180度转换形成的本质上是一样的
    case 5: { //tetrad choice, twist and parity
		// 该阶段分两部分来得到序列 第一阶段是一个环上各个块所在的位置 第二阶段是对应角块所形成的顺序。
		int j, k, cl, corn1[8] = { 0 }, corn2[4] = { 0 };
		// 8 bits, set bit if corner belongs in second tetrad.
		// also separate pieces for twist/parity determination
		k = j = 0;
		for( i=0; i<8; i++ )
		{
			if( (cl=(v_pos[i+12]-12)) & 4 )
			{
				//corn（4～7）分别表示16~19角块的出现顺序
				corn1[cl] = k++;
				n += 1<<i;
			}
			else
			{
				//corn（0~3) corn（0）表示12～15第一个数-12，corn（1）表示12～15第二个数-12，...
				corn1[j++] = cl;
			}
		}
      
		//Find permutation of second tetrad after solving first
		for( i=0; i<4; i++)
		{
			//document.write( "<br> i = " + i );
			//corn[i]的值是多少，corn2【i】=该值加4在16～19出现的顺序
			corn2[i] = corn1[4+corn1[i]];
		}
        
		//Solve one piece of second tetrad
		//for(;--i;)
		for( i=3; i>0; i--)      
		{
			//document.write( "<br> i = " + i );
			// 转换以得到相对位置 把corn2【0】对应的数顺序当作0（我们自己觉得他最后变为0但并未赋值，看底下分析），对后面重新排序
			corn2[i] ^= corn2[0];
		}

		// encode parity/tetrad twist
		// 对于每一种16～19出现位置的排列，若固定任意值剩下有6种排列
		n = n*6 + corn2[1]*2 - 2;

		//对最后两个数进行排列
		if( ( corn2[3] + 0.5 ) < corn2[2] )  //浮点数表示的整数，如果是"<"则至少差1
			n++;

		// 先分析一下 异或产生后的效果
		//    ^	0	1	2	3
		//    0	0	1	2	3
		//    1	1	0	3	2
		//    2	2	3	0	1
		//    3	3	2	1	0
		//    对任意数与其他数异或运算 0不变 对不是0的数则该数与0互换值，剩下两个互换值也在该数与剩余3个数进行运算后互换值
		//    对corn前四  15 13 12 14
		//    对应值      19 17 16 18
		//    顺序        	1  3  0  2
		//    结果        0  2  1  3
		//    即互换值
		//    下面说明这么换得合理性
		//      1，先说明对corn前四个这一步不需其顺序必须按照12，13，14，15.
		//         从魔方中心看这8块（4组）是一样的，等价的，12～15我们自己定义的。
		//         且这步的目的是使角分成两部分。
		//         我们只管各个(4个）的对应情况是否满足，顺序无影响。即使不是按12到顺序，我们就把他当作是。
		//      2，就对特殊的情况分析     初始状态	     UFR UBL DFL DBR
		//           按v_pos（12～19）顺序  初始对应状态  DLB DRF URB ULF
		//           当旋转任意面180比如r转后           dbr ubl dfl ufr
		//                                             dlb urb drf ulf
		//           由180度旋转而来是等价的 若我们仍按初始12～15的顺序排列变为
		//                                             UFR UBL DFL DBR
		//                                             ulf urb drf dlb 只有中间两个和外边两个换

		} break;

	case 6://two edge and one corner orbit, permutation
		// 对各个圈中顺序的情况，可同样当作24进制
		n = permtonum(v_pos,0)*576 + permtonum(v_pos,4)*24 + permtonum(v_pos,12);
		break;

	case 7://one edge and one corner orbit, permutation
		// 对各个圈中顺序的情况，可同样当作24进制
		n = permtonum(v_pos,8)*24 + permtonum(v_pos,16);
		break;
    }

    //document.write( "<br>ti=" + t + ", n=" + n + ", len=" + tables[t].length );

    return n;
}

const unsigned long bitmask[8] = { 0x0000000F, 0x000000F0, 0x00000F00, 0x0000F000, 0x000F0000, 0x00F00000, 0x0F000000, 0xF0000000 };

bool CCubeCalc::searchphase( int movesleft, int movesdone, int lastmove )
{
	//return true;

    // prune - position must still be solvable in the remaining moves available
    // 能找到最短步骤，会先一直返回false
	int r1 = getposition( phase  );
	int s1 = ( tables[ phase   ][ r1/8 ] & bitmask[ r1%8 ] ) >>  (r1 % 8 * 4);
    if( s1-1 > movesleft )
       return false;

    int r2 = getposition( phase+1 );
	int s2 = ( tables[ phase+1 ][ r2/8 ] & bitmask[ r2%8 ] ) >>  (r2 % 8 * 4);
    if( s2-1 > movesleft )
       return false;

    // 排除把剩下步数用完都不够的
    // 当movesleft==0退出，且先经过上面则tables[phase  ][getposition(phase  )]-1 = 1 
    //                                  tables[phase+1][getposition(phase+1)]-1 = 1  完成
    // If no moves left to do, we have solved this phase
    if( movesleft == 0 )
    {
      //document.write( "<br> ==end==" );
      return true;
    }
    
    // 没完成尝试每个面
    // not solved. try each face move
    for( int i=5; i>=0; i-- )
    {
       // do not repeat same face, nor do opposite after DLB.
       // 不能重复上一步，上一步已把该面转了1～3次 (i-lastmove+1 || i|1 ) 没看懂，我删了也行
       //if( i-lastmove && (i-lastmove+1 || i|1 ) )
       if( (i-lastmove != 0 ) && ( (i-lastmove+1 != 0 ) || (i|1 != 0 ) ) )
       {         
         moveface[ movesdone ] = i;

         // try 1,2,3 quarter turns of that face
         //for( var j=0; ++j<4; )
         for( int j=1; j<4; j++ )
         {
           //do move and remember it
           domove( i );
           moveamount[ movesdone ] = j;  //该面旋转次数

           //document.write( "<br>ml = " + movesleft + ", ☆ action: " + moveaction + ", amount: " + moveamount );

           //Check if phase only allows half moves of this face
           // 排除该阶段不能旋转的情况 见filltable()
           if( ( (j==2) || (i>=phase) ) && searchphase( movesleft-1, movesdone+1, i ) )
               return true;
         }

         // put face back to original position.
         domove( i );
       }
     }

     // no solution found
     //document.write( "<br>*******" );
     return false;
}

extern int resCount;
extern CString resValue[128];

// 取得计划
void CCubeCalc::GetPlan( CString strInput, DWORD *TotalNnn, int *nnn )
{
	//
	CString strTemp;

	//
	int i = 0;
	while( ( strInput.GetLength() > 0 ) && ( i < 20 ) )
	{
		CString sss = strInput;

		int p = strInput.Find( " " );
		if( p >= 0 )
		{
			sss = strInput.Left( p );
			int k = p+1;
			if( strInput[k] == ' ' ) k++;
			strInput = strInput.Mid( k );
		}
		else
		{
			strInput.Empty();
		}

		/////////////////////
		//解析v_pos和v_ori
		int pc = 0, k = 0, mor = 0;

		int k2 = 10, mor2 = 0;	//k2的初值应该比faces的长度大

		for( int f=0; f<val[i]; f++ )
		{
			//
			int j = strchr( faces, sss[f] ) - faces;

			// keep track of principal facelet for orientation
			if( j>k )
			{
				k = j;		//k   ---最大序号
				mor = f;	//mor ---最大序号出现的位置
			}

			if( j<k2 )
			{
				k2 = j;
				mor2 = f;	//mor2 ---最小序号出现的位置
			}

			//construct bit hash code
			pc += (1<<j);  // (1<<j) 表示1左移j位，序号就是二进制的第几位
		}		

		// find which cubelet it belongs, i.e. the label for this piece
		for(f=0; f<20; f++)
		{
			//document.write( "<br>pc=" + pc + ", bithash=" + (bithash.charCodeAt(f)-64) );
			if( pc == bithash[f] - 64 )
				break;
		}

		// store piece      19:57 2018-1-11
		v_pos[ order[i] - CHAROFFSET ] = f;
		v_ori[ order[i] - CHAROFFSET ] = mor % val[i];

		//判断是否合法, 合法的输入应该是：最小序号位置 - 最大序号位置 == 1或2
		//char *judge2 = "11111111111122221111";
		mor2 += ( mor2 < mor ) ? val[i] : 0;
		mor  += ( f>=12 && f<=15) ? 2 : 1;
		v_err[ order[i] - CHAROFFSET ] = ( mor == mor2 ) ? 0 : 1;

		//
		i++;
	}

	//位置
	resValue[resCount].Format( "input =" );
	for( i=0; i<20; i++ )
	{
		strTemp = bithashtoinput[ bithash[ v_pos[ order[i] - 'A' ] ] - 'E' ];
		resValue[resCount] += " ";
		resValue[resCount] += strTemp.Mid(  val[i] - ( v_ori[ order[i] - 'A' ] ) );
		resValue[resCount] += strTemp.Left( val[i] - ( v_ori[ order[i] - 'A' ] ) );
	}		
	resCount++;	

	//
	resValue[resCount].Format( "pos =" );
	for( i=0; i<20; i++ )	
		strTemp.Format( " %2d", v_pos[i] ), resValue[resCount] += strTemp;
	resCount++;

	//方向
	resValue[resCount].Format( "ori =" );
	for( i=0; i<20; i++ )
		strTemp.Format( " %2d", v_ori[i] ), resValue[resCount] += strTemp;
	resCount++;

	//正确性
	resValue[resCount].Format( "err =" );
	for( i=0; i<20; i++ )
		strTemp.Format( " %2d", v_err[ order[i] - 'A'] ), resValue[resCount] += strTemp;
	resCount++;

	//
	// 解决魔方, 两个为一阶段
	//solve the cube
	// four phases
	for( phase=0; phase<8; phase+=2 )
	{
		int ip = phase / 2;
		m_strplan[ip].Format( "\nphase %d:", ip + 1 );

		// 加大深度，得到最优解。
		// try each depth till solved
		for( int j=0; j<20; j++ )
		{
			if( searchphase(j,0,9) )
				break;
		}

		if( j>0 )
		{
			//output result of this phase
			strTemp.Format( " move[1..%d]", j ), m_strplan[ip] += strTemp;
			
			for( i=0; i<j; i++ )
			{		    
				strTemp.Format( " %c%d", moveFace[ moveface[i] ], moveamount[ i ] );   //打印各步实现方法及各步步数,并得到总步数
				m_strplan[ip] += strTemp;
			}

			*TotalNnn += j;
			*nnn += j;
		}
	}
}